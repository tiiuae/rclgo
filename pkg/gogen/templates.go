/*
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
    http://www.apache.org/licenses/LICENSE-2.0
*/

package gogen

import (
	"strings"
	"text/template"
)

var templateFuncMap template.FuncMap = template.FuncMap{
	"lc":                    strings.ToLower,
	"camelToSnake":          camelToSnake,
	"cSerializationCode":    cSerializationCode,
	"goSerializationCode":   goSerializationCode,
	"defaultCode":           defaultCode,
	"ucFirst":               ucFirst,
	"srvNameFromSrvMsgName": srvNameFromSrvMsgName,
}

var ros2MsgToGolangTypeTemplate = template.Must(template.New("ros2MsgToGolangTypeTemplate").Funcs(templateFuncMap).Parse(
	`/*{{ $Md := . }}
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package {{ $Md.GoPackage }}
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	{{range $path, $name := $Md.GoImports -}}
	{{$name}} "{{$path}}"
	{{""}}{{- end}}
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -l{{$Md.Package}}__rosidl_typesupport_c -l{{$Md.Package}}__rosidl_generator_c
{{range $k, $v := $Md.CImports -}}
#cgo LDFLAGS: -l{{$k}}__rosidl_typesupport_c -l{{$k}}__rosidl_generator_c
{{""}}
{{- end}}
#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
{{if eq $Md.Type "msg"}}
#include <{{$Md.Package}}/msg/{{$Md.Name | camelToSnake}}.h>
{{else if eq $Md.Type "srv"}}
#include <{{$Md.Package}}/srv/{{$Md.Name | srvNameFromSrvMsgName | camelToSnake}}.h>
{{end}}
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("{{.Package}}/{{.Name}}", &{{.Name}}{})
}

{{- if $Md.Constants }}
const (
{{- range $Md.Constants }}
	{{$Md.Name}}_{{.RosName}} {{.GoPkgReference}}{{.GoType}} = {{.Value}}{{if .Comment -}} // {{.Comment}}{{- end}}
{{- end }}
)
{{- end }}

// Do not create instances of this type directly. Always use New{{.Name}}
// function instead.
type {{.Name}} struct {
	{{- range $k, $v := .Fields }}
	{{$v.GoName }} {{$v.TypeArray}}{{$v.GoPkgReference}}{{$v.GoType}}` +
		"{{\"\"}} `yaml:\"{{$v.RosName}}\"`" + `{{if .Comment -}} // {{.Comment}}{{- end}}
	{{- end }}
}

// New{{.Name}} creates a new {{.Name}} with default values.
func New{{.Name}}() *{{.Name}} {
	self := {{.Name}}{}
	self.SetDefaults(nil)
	return &self
}

func (t *{{.Name}}) SetDefaults(d interface{}) ros2types.ROS2Msg {
	{{""}}
	{{- range $k, $v := .Fields -}}
	{{defaultCode $v}}
	{{- end -}}
	{{""}}
	return t
{{"}"}}

func (t *{{.Name}}) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__{{.Package}}__{{.Type}}__{{.Name}}())
}
func (t *{{.Name}}) PrepareMemory() unsafe.Pointer { //returns *C.{{.Package}}__{{.Type}}__{{.Name}}
	return (unsafe.Pointer)(C.{{.Package}}__{{.Type}}__{{.Name}}__create())
}
func (t *{{.Name}}) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.{{.Package}}__{{.Type}}__{{.Name}}__destroy((*C.{{.Package}}__{{.Type}}__{{.Name}})(pointer_to_free))
}
func (t *{{.Name}}) AsCStruct() unsafe.Pointer {
	mem := (*C.{{.Package}}__{{.Type}}__{{.Name}})(t.PrepareMemory())
	{{- range .Fields }}
	{{cSerializationCode . $Md}}
	{{- end }}
	return unsafe.Pointer(mem)
}
func (t *{{.Name}}) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	{{if .Fields -}}
	mem := (*C.{{.Package}}__{{.Type}}__{{.Name}})(ros2_message_buffer)
	{{- range .Fields }}
	{{goSerializationCode . $Md}}
	{{- end }}
	{{- end }}
}
func (t *{{.Name}}) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type C{{.Name}} = C.{{.Package}}__{{.Type}}__{{.Name}}
type C{{.Name}}__Sequence = C.{{.Package}}__{{.Type}}__{{.Name}}__Sequence

func {{.Name}}__Sequence_to_Go(goSlice *[]{{.Name}}, cSlice C{{.Name}}__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]{{.Name}}, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.{{.Package}}__{{.Type}}__{{.Name}}__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_{{.Package}}__{{.Type}}__{{.Name}} * uintptr(i)),
		))
		(*goSlice)[i] = {{.Name}}{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func {{.Name}}__Sequence_to_C(cSlice *C{{.Name}}__Sequence, goSlice []{{.Name}}) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.{{.Package}}__{{.Type}}__{{.Name}})(C.malloc((C.size_t)(C.sizeof_struct_{{.Package}}__{{.Type}}__{{.Name}} * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.{{.Package}}__{{.Type}}__{{.Name}})(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_{{.Package}}__{{.Type}}__{{.Name}} * uintptr(i)),
		))
		*cIdx = *(*C.{{.Package}}__{{.Type}}__{{.Name}})(v.AsCStruct())
	}
}
func {{.Name}}__Array_to_Go(goSlice []{{.Name}}, cSlice []C{{.Name}}) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func {{.Name}}__Array_to_C(cSlice []C{{.Name}}, goSlice []{{.Name}}) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.{{.Package}}__{{.Type}}__{{.Name}})(goSlice[i].AsCStruct())
	}
}


`))

var ros2ServiceToGolangTypeTemplate = template.Must(template.New("ros2ServiceToGolangTypeTemplate").Funcs(templateFuncMap).Parse(
	`/*
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package {{ .GoPackage }}

/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -l{{.Package}}__rosidl_typesupport_c -l{{.Package}}__rosidl_generator_c
#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <{{.Package}}/srv/{{.Name | camelToSnake}}.h>
*/
import "C"

import (
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"

	"unsafe"
)

func init() {
	ros2_type_dispatcher.RegisterROS2ServiceTypeNameAlias("{{.Package}}/{{.Name}}", {{ .Name }})
}

type _{{.Name}} struct {
	req,resp ros2types.ROS2Msg
}

func (s *_{{.Name}}) Request() ros2types.ROS2Msg {
	return s.req
}

func (s *_{{.Name}}) Response() ros2types.ROS2Msg {
	return s.resp
}

func (s *_{{.Name}}) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__{{.Package}}__{{.Type}}__{{.Name}}())
}

// Modifying this variable is undefined behavior.
var {{ .Name }} ros2types.Service = &_{{.Name}}{
	req: &{{ .Request.Name }}{},
	resp: &{{ .Response.Name }}{},
}
`))

var ros2rosidl_runtime_c_handlers = template.Must(template.New("ros2-rosidl-runtime-c-handlers-template").Funcs(templateFuncMap).Parse(
	`/*{{ $Md := . }}
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rosidl_runtime_c

/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo CFLAGS: -I/opt/ros/foxy/include

#include "rosidl_runtime_c/string.h"
#include "rosidl_runtime_c/primitives_sequence.h"

*/
import "C"
import (
	"unsafe"
){{range $k, $v := .PMap -}}{{if .SkipAutogen}}{{- else -}}
{{""}}
{{""}}
// {{.RosType | ucFirst}}
type C{{.RosType | ucFirst}} = C.{{.CType}}
type C{{.RosType | ucFirst}}__Sequence = C.rosidl_runtime_c__{{.CStructName}}__Sequence

func {{.RosType | ucFirst}}__Sequence_to_Go(goSlice *[]{{.GoType}}, cSlice C{{.RosType | ucFirst}}__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]{{.GoType}}, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.{{.CType}})(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_{{.CType}} * uintptr(i)),
		))
		(*goSlice)[i] = {{.GoType}}(*cIdx)
	}
}
func {{.RosType | ucFirst}}__Sequence_to_C(cSlice *C{{.RosType | ucFirst}}__Sequence, goSlice []{{.GoType}}) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.{{.CType}})(C.malloc((C.size_t)(C.sizeof_{{.CType}} * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.{{.CType}})(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_{{.CType}} * uintptr(i)),
		))
		*cIdx = (C.{{.CType}})(v)
	}
}
func {{.RosType | ucFirst}}__Array_to_Go(goSlice []{{.GoType}}, cSlice []C{{.RosType | ucFirst}}) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i] = {{.GoType}}(cSlice[i])
	}
}
func {{.RosType | ucFirst}}__Array_to_C(cSlice []C{{.RosType | ucFirst}}, goSlice []{{.GoType}}) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = C.{{.CType}}(goSlice[i])
	}
}
{{- end}}{{- end}}
`))

var ros2MsgImportAllPackage = template.Must(template.New("ros2MsgToGolangTypeTemplate").Funcs(templateFuncMap).Parse(
	`/*
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package ros2msgs

import (
	{{range $import, $unused := . -}}
	_ "github.com/tiiuae/rclgo/pkg/ros2/msgs/{{$import}}" //
	{{""}}{{- end}}
)
`))

var ros2ErrorCodes = template.Must(template.New("ros2ErrorCodes").Funcs(templateFuncMap).Parse(
	`/*{{ $P := . }}
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package ros2

/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation

#include <rcl/types.h>
#include <rmw/ret_types.h>

*/
import "C"
import (
	"runtime"
)

func ErrorsCastC(rcl_ret_t C.rcl_ret_t, context string) error {
	stackTraceBuffer := make([]byte, 2048)
	runtime.Stack(stackTraceBuffer, false) // Get stack trace of the current running thread only

	// https://stackoverflow.com/questions/9928221/table-of-functions-vs-switch-in-golang
	// switch-case is faster thanks to compiler optimization than a dispatcher?
	switch rcl_ret_t {
	{{range $e := .ERRORS -}}{{if $e.Rcl_ret_t -}}{{if not (index $P.DEDUP_FILTER $e.Name) -}}
	case C.{{$e.Name}}:
		return &{{$e.Name}}{rclRetStruct: rclRetStruct{rclRetCode: {{$e.Rcl_ret_t}}, trace: string(stackTraceBuffer), context: errorsBuildContext(&{{$e.Name}}{}, context, string(stackTraceBuffer))}}
	{{""}}
	{{- end}}{{- end}}{{- end}}
	default:
		return &RCL_RET_GOLANG_UNKNOWN_RET_TYPE{rclRetStruct: rclRetStruct{rclRetCode: (int)(rcl_ret_t), context: context}}
	}
}

type RCL_RET_GOLANG_UNKNOWN_RET_TYPE struct {
	rclRetStruct
}

{{range $e := .ERRORS -}}{{if $e.Rcl_ret_t}}
// {{$e.Name}} {{$e.Comment}}
type {{$e.Name}} struct {
	rclRetStruct
}
{{""}}
{{- end}}{{- end}}

{{range $e := .ERRORS -}}{{if $e.Reference}}
// {{$e.Name}} {{$e.Comment}}
type {{$e.Name}} {{$e.Reference}}
{{""}}
{{- end}}{{- end}}

`))
